name: Hazard Detection API CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libglib2.0-0 libgl1-mesa-glx libsm6 libxext6 libgomp1
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 app --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Type check with mypy
      run: |
        pip install mypy types-requests types-pillow
        mypy app --ignore-missing-imports --no-strict-optional
      continue-on-error: true  # Don't fail the build on mypy errors for now
    
    - name: Test with pytest
      run: |
        pytest app/tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
      env:
        ENVIRONMENT: testing
        LOG_LEVEL: DEBUG
        MODEL_DIR: /tmp/test_models
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run Safety check
      run: safety check --json --output safety-report.json
      continue-on-error: true

  docker:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t hazard-detection-api:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 8080:8080 hazard-detection-api:latest
        sleep 30
        curl -f http://localhost:8080/health || exit 1
        docker stop test-container

  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Railway
      run: |
        echo "ðŸš€ Deployment would happen here"
        echo "Integration with Railway CLI or API would be implemented"
        echo "Current commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"